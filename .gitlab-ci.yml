# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
# stages:
# - test
# sast:
#   stage: test
# include:
# - template: Security/SAST.gitlab-ci.yml

# 构建阶段
stages:
  # - settings
  - build
  - deploy
#  - deploy_test
#  - deploy_production


# 缓存（默认状况下，每一个pipelines和jobs中能够共享一切，从GitLab 9.0开始）
cache:
#  key: ${CI_BUILD_ID}
  # windows下？？？
#  key: "%CI_COMMIT_REF_SLUG%"
#  key: ${CI_BUILD_STAGE}
# 缓存每一个分支
#  key: "$CI_COMMIT_REF_NAME"
 paths:
#    # 缓存node_mudules将大大提升ci运行的速度
  #  - logo/favicon.ico
  #  - main.js
#    - nvm-dist

# 构建工做-安装依赖
# job_install_deps:
#   stage: install_deps
#   # 匹配使用哪一个tag的runner(注册时填写的)
#   tags:
#     - windows
#   only:
#     - dev
#     - main
#   script:
#     - npm i

# 构建工做-运行测试用例
#job_test:
#  stage: test
#  only:
#    - develop
#    - master
#  script:
#    - npm run test

# job_settings:
#   stage: settings
#   script: |
#     #!/bin/bash
#     ls
#     if [ -z "$APP_URL" ]; then
#       echo "no env APP_URL !"
#       exit 1
#     fi

#     sed -i "s|APP_HOST|$APP_URL|g" main.js

#     if [ -n "$APP_ICON" ]; then
#       curl $APP_ICON -o logo/favicon.ico
#     fi

#     git diff
#     mkdir out || echo ""
#     cp logo/favicon.ico out/
#     cp main.js out/
#   artifacts:
#     name: ${CI_BUILD_ID}_settings
#     paths:
#       - out
      
# 构建工做-编译
job_build:
  stage: build
  # 匹配使用哪一个tag的runner
  image:
    name: electronbuilds/electron
    entrypoint: ['']
  tags:
    # - windows
    - windows-1809
  # 全部操做只在以下分支上进行
  only:
    - dev
    - main
  # 阶段运行的脚本
  script: |
    dir
    systeminfo
    npm i
    npm run ico
    npm run make
      
  # 工件，能够缓存在gitlab的流水线记录中，供直接下载
  artifacts:
    # 使用当前stage和分支名称做为存档名称
    # name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"_${CI_PIPELINE_CREATED_AT}
    # 工件缓存的有效时间
    expire_in: 3 days
    # 路径
    paths:
      # 工件指向的目录，这里指整个dist目录
      - out/make

job_deploy:
  stage: deploy
  script:
    - ls

mimio_deploy:
  image:
    name: minio/mc
    entrypoint: ['']
  stage: deploy
  before_script:
    - mc alias set minio $MINIO_HOST $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
  script:
    - ls
    - du -h -a out || echo "dir out not exit"
    - echo "$APP_URL" >> out/make/readme.txt 
    - file="${CI_COMMIT_SHORT_SHA}_${CI_PIPELINE_CREATED_AT}"
    - mc cp -r out/make/* minio/gdztyy-b2c/win/$file/
  artifacts:
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"_${CI_PIPELINE_CREATED_AT}
    expire_in: 3 days
    paths:
      # 工件指向的目录，这里指整个dist目录
      - out/make/*.tar.gz

